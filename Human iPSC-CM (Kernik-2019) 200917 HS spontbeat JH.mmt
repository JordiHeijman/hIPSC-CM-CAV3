[[model]]
name: Kernik2019 - Su Min Pack (Maastricht University)
desc: """
    Myokit implementation of Kernik 2019

    Based on the matlab code found at https://github.com/ClancyLabUCD/IPSC-model

    References
    - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    [1] Kernik DC, Morotti S, Wu H, Garg P, Duff HJ, Kurokawa J, Jalife J, 
    Wu JC, Grandi E, Clancy CE. A computational model of induced pluripotent
    stem cell derived cardiomyocytes incorporating experimental variability from
    multiple data sources. 
    The Journal of physiology. 2019 Jul 6.

    Original copyright notice:
    - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    Copyright (C) 2019 Kernik et al.
    """
author: Su Min Pack
# Initial values
membrane.V      = -75.5966016388547
calcium.uCa_i   = 0.000219191642424964
calcium.uCa_sr  = 0.335086796732326
sodium.Nai      =7.16928091250999
potassium.K_i   = 104.748824394112
irel.R=0.0113120363433751
irel.O=0.000165045105312396
irel.I=0.0142153622323012
ina.H           = 0.739543607812429
ina.M           = 0.0297549962926414
ina.J           = 0.124515982574505
inal.a          = 0.001022252813581797
inal.i          = 0.3593255076983574
ito.S           = 0.746802810614006
ito.R=0.000267597833344161
ikr.a           = 0.450577185148519
ikr.i            = 0.309767485715433
ical.D          = 0.000394925342652924
ical.F1=0.170990105585540
ical.fCa       = 0.877798946134089
iks.Xs          = 0.153788281650949
icaT.dCaT=0.000270195573471577
icaT.fCaT=0.756032904368393
If.Xf=0.00640338504912616

[parameters]
hetreg = 0

ICaL_Block = 0.0
IK1_Block = 0.0
IKr_Block = 0.0
IKs_Block = 0.0
IKur_Block = 0.0
INa_Block = 0.0
INaL_Block = 0.0
INaK_Block = 0.0
INCX_Block = 0.0
Ito_Block = 0.0

Ca_o = 1.8 [mmol/L] : Extracellular Ca2+ concentration
K_o = 5.4 [mmol/L] : Extracellular K+ concentration
Na_o = 140 [mmol/L] : Extracellular Na+ concentration

[output]
Vm = membrane.V
Cai = 1000*calcium.uCa_i
#dVdt = dot(membrane.V)

#
# Simulation engine variables
#
[engine]
time = 0 bind time
pace = 0 bind pace

#
# Total membrane currents and potential
#
[membrane]
C = 1 [uF/cm^2]
dot(V) = -1/C * (i_ion + i_stim + i_diff)
    in [mV]
    label membrane_potential
    desc: The membrane potential
stim_amplitude = -80 [uA/uF]
hyperpol_cur = 0
i_stim = (engine.pace * stim_amplitude) + (1-engine.pace) * hyperpol_cur
    desc: The stimulus current
    in [uA/uF]
i_diff = 0 bind diffusion_current
    desc: The diffusion current from cell to cell
    in [uA/uF]
i_ion = ik1.IK1+ito.ITo+ikr.IKr+iks.IKs+ical.ICaL+icaT.i_CaT+inak.INaK+ina.INa+inal.INaL+inaca.INaCa+ipca.IpCa+If.i_f+inab.INaB+icab.ICab+ikur.IKur
    desc: The remaining transmembrane currents
    in [uA/uF]

#
# Physical constants
#
[phys]
F = 96.487 [C/mol] : Faraday's constant
R = 8.314 [mJ/mol/K] : Gas constant
T = 310 [K] : Temperature
FRT = F/R/T
RTF = R*T/F

#
# Common terms
#
[common]
vf = membrane.V * phys.FRT
vff = vf * phys.F
evf = exp(vf)

#
# Cell geometry
#
[cell]

Cm=60
 #pF
V_tot=3960
 #um^3
Vc_tenT=16404
VSR_tenT=1094
V_tot_tenT=Vc_tenT+VSR_tenT
 #V_total data from Hwang et al., V_c and V_SR  proportionally scaled from Ten Tusscher 2004 values
v_cyt=V_tot*(Vc_tenT/V_tot_tenT)
#=3712.4 um^3 (93.7% total volume)
v_sr=V_tot*(VSR_tenT/V_tot_tenT)
#=247.6 um^3 (6.3% total volume)

    desc: """
    L-type Ca2+ current Subspace (SS,CaL) volume

    The area between the SR subspace and the ICaL channel has a slightly
    different Ca2+ concentration than the rest of the cell.
    """

#
# Extracellular concentrations
#
[extra]
Ko  = parameters.K_o #5.4 [mM] : Extracellular potassium concentration   # Same as LR1
Cao = parameters.Ca_o #1.8 [mM] : Extracellular calcium concentration     # Same as LR1
Nao = parameters.Na_o #140 [mM] : Extracellular sodium concentration      # Same as LR1

#
# Reversal potentials
#
[nernst]
EK = phys.RTF * log(extra.Ko / potassium.K_i)
    desc: Nernst potential for Potassium currents
    in [mV]

ENa = phys.RTF * log(extra.Nao / sodium.Nai)
    desc: Reversal potential for Sodium currents
    in [mV]

ECa = 0.5*phys.R*phys.T/phys.F*log(extra.Cao/calcium.uCa_i)

#
# Calcium in subspaces
# Described in sections P and Q
#
[calcium]
## 2: CaSR (millimolar)
#rapid equilibrium approximation equations -- not as formulated in ten Tusscher 2004 text
Buf_SR = 10.0*1.2
#millimolar (in calcium_dynamics)
Kbuf_SR = 0.3
#millimolar (in calcium_dynamics)
Ca_SR_bufSR = 1/(1.0+Buf_SR*Kbuf_SR/(uCa_sr+Kbuf_SR)^2.0)

dot(uCa_sr) = Ca_SR_bufSR*cell.v_cyt/cell.v_sr*(iup.i_up-(irel.Irel+ileak.i_leak))

#-------------------------------------------------------------------------------
## 3: Cai (millimolar)
#rapid equilibrium approximation equations -- not as formulated in ten Tusscher 2004 text
Buf_C =.06
# millimolar (in calcium_dynamics)
Kbuf_C = .0006
# millimolar (in calcium_dynamics)
Cai_bufc = 1/(1.0+Buf_C*Kbuf_C/(uCa_i+Kbuf_C)^2.0)

dot(uCa_i) = (Cai_bufc)*(ileak.i_leak-iup.i_up+irel.Irel-(ical.ICaL+icaT.i_CaT+icab.ICab+ipca.IpCa-2*inaca.INaCa)*cell.Cm/(2.0*cell.v_cyt*phys.F))



#
# Sodium concentrations
# Described in section Q
#
[sodium]
## 4: Nai (millimolar) (in sodium_dynamics)
dot(Nai) = -cell.Cm*(ina.INa+inal.INaL+inab.INaB+If.i_fNa+3.0*inak.INaK+3.0*inaca.INaCa +ical.i_CaL_Na)/(phys.F*cell.v_cyt)

#
# Potassium concentrations
# Described in section Q
#
[potassium]
## 5: Ki (millimolar) (in potatssium_dynamics)
dot(K_i) = -cell.Cm*(ik1.IK1+ito.ITo+ikur.IKur+ikr.IKr+iks.IKs+If.i_fK -2.*inak.INaK + ical.i_CaL_K )/(phys.F*cell.v_cyt)


#
# ICaL
# Described in section A of the supplement to [1]
#
[ical]
use membrane.V
use common.vf, common.vff
use calcium.uCa_i as Cai
use phys.F as F
use phys.R as R
use phys.T as T
use extra.Ko as Ko

## L-type Ca2+ current (ICaL):
#define parameters from x_cal
d1=12.96629419
d2=7.079145965
d5=0.044909416
d6=-6.909880369

f1=0.00051259
f2=-49.50571203
f5=1931.211224
f6=5.7300275
taud_const=1.658246947
tauf_const=100.4625592

hetreg_shiftact = 5
hetreg_shiftinact = -5
shift_act = 0
shift_inact = 0
tauf_fact = 1

#parameter-dependent values:
d3=d5*d1
d4=1/((1/d2)+(1/d6))
f3=f5*f1
f4=6.48006066346213228 #1/((1/f2)+(1/f6))
f4_hetreg = 10 

# 7: d (dimensionless) (activation in i_CaL)
alpha_d=d1*exp(V/d2)
beta_d=d3*exp(V/d4)
#d_inf=alpha_d/(alpha_d+ beta_d)
d_inf = 1 / (1 + exp((V-(-20)+shift_act+(hetreg_shiftact * parameters.hetreg))/-7))
tau_d=((1/(alpha_d+ beta_d))+taud_const)
dot(D)= (d_inf-D)/tau_d

# 8: f (dimensionless) (inactivation  i_CaL)
alpha_f=f1*exp(V/f2)
beta_f=f3*exp(V/(if(parameters.hetreg == 1, f4_hetreg, f4)))
#f_inf=alpha_f/(alpha_f+beta_f)
f_inf = 1 / (1 + exp((V-(-44)+shift_inact+(hetreg_shiftinact * parameters.hetreg))/5))
tau_f=tauf_fact * ((1/(alpha_f+beta_f)) + tauf_const)
dot(F1)=(f_inf-F1)/tau_f

# 9: fCa (dimensionless) (calcium-dependent inactivation in i_CaL)
# from Ten tusscher 2004
scale_Ical_Fca_Cadep=1.2
alpha_fCa = 1.0/(1.0+((scale_Ical_Fca_Cadep*Cai)/0.000325)^8.0)
beta_fCa = 0.1/(1.0+exp((scale_Ical_Fca_Cadep*Cai-0.0005)/0.0001))
gamma_fCa = 0.2/(1.0+exp((scale_Ical_Fca_Cadep*Cai-0.00075)/0.0008))

fCa_inf =  ((alpha_fCa+beta_fCa+gamma_fCa+0.23)/(1.46))
tau_fCa=2 
#ms 
k_fca_thresh = -60
k_fca=if(fCa_inf>fCa,if(V>k_fca_thresh,0,if(V>-60,0.1,1)),1)
#Original: k_fca=if(fCa_inf>fCa,if(V>-60,0,1),1)
dot(fCa) = k_fca*(fCa_inf-fCa)/tau_fCa

#Current:
p_CaL =  0.308027691 
# nS_per_pF (in i_CaL)
p_CaL_shannonCa=5.4e-4
p_CaL_shannonNa=1.5e-8
p_CaL_shannonK=2.7e-7
p_CaL_shannonTot=p_CaL_shannonCa + p_CaL_shannonNa + p_CaL_shannonK
p_CaL_shannonCap=p_CaL_shannonCa/p_CaL_shannonTot
p_CaL_shannonNap=p_CaL_shannonNa/p_CaL_shannonTot
p_CaL_shannonKp=p_CaL_shannonK/p_CaL_shannonTot

p_CaL_Ca=p_CaL_shannonCap*p_CaL
p_CaL_Na=p_CaL_shannonNap*p_CaL
p_CaL_K=p_CaL_shannonKp*p_CaL

Po = D*F1*fCa

ibarca= p_CaL_Ca*4.0*V*F^2.0/(R*T)* (.341*Cai*exp(2.0*V*F/(R*T))-0.341*extra.Cao)/(exp(2.0*V*F/(R*T))-1.0)
i_CaL_Ca =  ibarca * Po

ibarna= p_CaL_Na*V*F^2.0/(R*T)* (.75*sodium.Nai*exp(V*F/(R*T))-0.75*extra.Nao)/(exp(V*F/(R*T))-1.0)
i_CaL_Na=  ibarna * Po

ibark= p_CaL_K*V*F^2.0/(R*T)* (.75*potassium.K_i*exp(V*F/(R*T))-0.75*Ko)/(exp(V*F/(R*T))-1.0)
i_CaL_K = ibark * Po

ICaL= (1.0 - parameters.ICaL_Block) * (i_CaL_Ca+i_CaL_Na+i_CaL_K)




#
# Markov model of IKs
# Described in section B
#

[icaT]
use membrane.V as V
use nernst.ECa as E_Ca

## T-type Calcium Current (ICaT):
#SAN T-TYPE CA2+ model (Demir et al., Maltsev-Lakatta ), G_CaT determined by fit to Kurokawa IV:

#19: dCaT (activation in i_CaT)
dcat_inf= 1/(1+exp(-(V +26.3)/6))

tau_dcat=1/(1.068*exp((V+26.3)/30)+ 1.068*exp(-(V+26.3)/30))
dot(dCaT) = (dcat_inf-dCaT)/tau_dcat

# 20: fCaT (inactivation in i_CaT)
fcat_inf= 1/(1+exp((V +61.7)/5.6))
tau_fcat=1/(.0153*exp(-(V+61.7)/83.3)+ 0.015*exp((V+61.7)/15.38))
dot(fCaT) = (fcat_inf-fCaT)/tau_fcat

g_CaT=0.185
# nS_per_pF (in i_CaT)
i_CaT= g_CaT*(V-E_Ca)*dCaT*fCaT


[iks]
use membrane.V
use calcium.uCa_i
use common.vf

#define parameters from x_IKS:
ks1=0.001166 
ks2=66726.83868
ks5=0.280458908
ks6=-18.86697157
tauks_const=4.74E-06

#parameter-dependent values:
ks3=ks5*ks1
ks4=1/((1/ks2)+(1/ks6))

# 12: Xs (dimensionless) (activation in i_Ks)
alpha_Xs=ks1*exp(V/ks2)
beta_Xs=ks3*exp(V/ks4)
Xs_inf=alpha_Xs/(alpha_Xs+beta_Xs)
tau_Xs=(1/(alpha_Xs+beta_Xs))+ tauks_const
dot(Xs)=(Xs_inf-Xs)/tau_Xs

IKs = (1.0 - parameters.IKs_Block) * GKs * (Xs^2) * (V - nernst.EK)
    in [uA/uF]
GKs  = 0.0077
    desc: IKs maximal conductance

#
# INa
# Described in section G of the supplement to [1]
#
# Identical to the original Luo-Rudy (Guinea pig) formulation.
#

[ina]
use membrane.V as V
use nernst.ENa as E_Na
#define parameters from x_Na
m1=108.0458464
m2=13.10701573
m5=0.002326914
m6= -7.91772629

h1=0.003626599
h2=-19.83935886
h5=9663.294977
h6=7.395503565

j1=0.000512257
j2=-66.5837555

tau_m_const=0.03197758
tau_h_const=0.167331503
tau_j_const=0.951088725

#parameter-dependent values:
m3=m5*m1
m4=1/((1/m2)+(1/m6))
h3=h5*h1
h4=1/((1/h2)+(1/h6))
j5=h5
j6=h6
j3=j5*j1
j4=1/((1/j2)+(1/j6))

#13: h (dimensionless) (inactivation in i_Na)
alpha_h=h1*exp(V/h2)
beta_h=h3*exp(V/h4)
h_inf=(alpha_h/(alpha_h+beta_h))
tau_h=((1/(alpha_h+beta_h))+tau_h_const)
dot(H)=(h_inf-H)/tau_h

# 14: j (dimensionless) (slow inactivation in i_Na)
alpha_j=j1*exp(V/j2)
beta_j=j3*exp(V/j4)
j_inf=(alpha_j/(alpha_j+beta_j))
tau_j=((1/(alpha_j+beta_j))+tau_j_const)
dot(J)=(j_inf-J)/tau_j

# 15: m (dimensionless) (activation in i_Na)
alpha_m=m1*exp(V/m2)
beta_m=m3*exp(V/m4)
m_inf=alpha_m/(alpha_m+beta_m)
tau_m=((1/(alpha_m+beta_m))+tau_m_const)
dot(M) =(m_inf-M)/tau_m

#Current:
g_Na=9.720613409
# nS_per_pF (in i_Na)
INa = (1.0 - parameters.INa_Block) * (g_Na*M^3.0*H*J*(V-E_Na))

[inal]
use membrane.V as V
Gbar = .0065
hetreg_inal = -20.0
INaL = (1.0 - (hetreg_inal * parameters.hetreg)) * (1.0 - parameters.INaL_Block) * Gbar * a^3 * i * (V - nernst.ENa)
    desc: Late sodium current
    in [uA/uF]
dot(a) =  alpha * (1 - a) - beta * a
    alpha = if(dd == 0, 3.2, 0.32 * vv / dd)
        vv = V + 47.13
        dd = 1 - exp(-0.1 * vv)
    beta  = 0.08 * exp(-V / 11)
dot(i) =  (hLss - i) / 600
    hLss = 1 / (1 + exp((V + 91) / 6.1))

#
# Background sodium current
# Described in section H
#
[inab]
use membrane.V as V
use nernst.ENa as E_Na
##Background Sodium (INaB):
# Ten Tusscher formulation
GNaB = 0.00029*1.5   
# nS_per_pF (in i_b_Na)
INaB = GNaB*(V-E_Na)


#
# Sodium potassium exchanger
# A recently developed I(NaK) formulation based on data from canine left
#  ventricular epicardial myocytes.
# Described in section C
#

[inak]
use membrane.V as V
use extra.Ko as Ko
use sodium.Nai as Nai
use phys.F as F
use phys.R as R
use phys.T as T
##Na+/K+ pump current (INaK):
#Ten Tusscher formulation
Km_K = 1.0
# Ko half-saturation constant millimolar (in i_NaK)
Km_Na = 40.0
#  Nai half-saturation constant millimolar (in i_NaK)
PNaK = 1.362*1.818
# maxiaml nak pA_per_pF (in i_NaK)
INaK = (1.0 - parameters.INaK_Block) * PNaK*((Ko*Nai)/((Ko+Km_K)*(Nai+Km_Na)*(1.0+0.1245*exp(-0.1*V*F/(R*T))+0.0353*exp(-V*F/(R*T)))))


#
# Sodium Calcium exchanger
#

[inaca]
use extra.Cao as Cao
use extra.Nao as Nao
use membrane.V as V
use calcium.uCa_sr as Ca_sr
use common.vf as vf
## Na+/Ca2+ Exchanger current (INaCa):
# Ten Tusscher formulation
KmCa = 1.38
# Cai half-saturation constant millimolar (in i_NaCa)
KmNai = 87.5
# Nai half-saturation constnat millimolar (in i_NaCa)
Ksat = 0.1
# saturation factor dimensionless (in i_NaCa)
gamma = 0.35*2
# voltage dependence parameter dimensionless (in i_NaCa)
alpha = 2.5*1.1
#factor to enhance outward nature of inaca dimensionless (in i_NaCa)
kNaCa = 1000*1.1
# maximal inaca pA_per_pF (in i_NaCa)



INaCa = (1.0 - parameters.INCX_Block) * kNaCa*((exp(gamma*V*phys.F/(phys.R*phys.T))*(sodium.Nai^3.0)*Cao)-(exp((gamma-1.0)*V*phys.F/(phys.R*phys.T))*(Nao^3.0)*calcium.uCa_i*alpha))/(((KmNai^3.0)+(Nao^3.0))*(KmCa+Cao)*(1.0+Ksat*exp((gamma-1.0)*V*phys.F/(phys.R*phys.T))))


[ik1]
use membrane.V
use extra.Ko
use nernst.EK
xK11=0.477994972
xK12=27.24275588
xK13=4.925023318
xK14=8.7222376
xK15=56.6361975
x_K1=0.133785778

alpha_xK1=xK11*exp((V+xK13)/xK12)
beta_xK1=exp((V+xK15)/xK14)
XK1_inf=alpha_xK1/(alpha_xK1+beta_xK1)

g_K1=x_K1
IK1 = (1.0 - parameters.IK1_Block) * (g_K1*XK1_inf*(V-EK)*sqrt(Ko/5.4))


#
# IKr
# The rapid component of the delayed rectifier potassium current (IKr)
# Described in section I
#
# This current is modelled with a time-dependent activation and an
# instantaneous inactivation. The formulation is taken from the HRd2004 model.
#
#Implemented based on Kernik et al. J Pysiol 2019 (human IPSC-CM model)
[ikr]
Xr1_1 = 0.005748852
Xr1_2 = 13.62349264
Xr1_5 = 0.047630571
Xr1_6 = -7.06808743
Xr1_3=Xr1_5*Xr1_1
Xr1_4=1/((1/Xr1_2)+(1/Xr1_6))

Xr2_1 = 0.012456641
Xr2_2 = -25.99445816
Xr2_5 = 37.34263315
Xr2_6 = 22.09196424
Xr2_3=Xr2_5*Xr2_1
Xr2_4=1/((1/Xr2_2)+(1/Xr2_6))

use membrane.V as V
Gbar = 0.218025 [mS/uF]
G = Gbar * sqrt(extra.Ko / 5.4)
    in [mS/uF]
    desc: Maximum conductivity of IKr
dot(a)  = (inf - a) / tau_Xr1
    alpha_Xr1 = Xr1_1*exp(V/Xr1_2)
    beta_Xr1 = Xr1_3*exp(V/Xr1_4)
    inf=alpha_Xr1/(alpha_Xr1 + beta_Xr1)
    tau_Xr1=((1/(alpha_Xr1 + beta_Xr1))+ 50)
    desc: Activation of IKr

dot(i)  = (inf_i - i) / tau_Xr2
    alpha_Xr2 = Xr2_1*exp(V/Xr2_2)
    beta_Xr2 = Xr2_3*exp(V/Xr2_4)
    inf_i=alpha_Xr2/(alpha_Xr2 + beta_Xr2)
    tau_Xr2=((1/(alpha_Xr2 + beta_Xr2))+ 0)
    desc: Inactivation of IKr
hetreg_ikr = 0.4
IKr = (1.0 - (hetreg_ikr * parameters.hetreg)) * (1.0 - parameters.IKr_Block) * (G * a * i * (V - nernst.EK))
    desc: Rapid delayed rectifier Potassium current
    in [uA/uF]

#
# IKur (IKp) :: The plateau potassium current
# Described in section K
#
[ikur]
use membrane.V as V
Gbar = 2.76e-3
IKur = 0# (1.0 - parameters.IKur_Block) * Gbar * K * (V - nernst.EK)
    K = 1 / (1 + exp((7.488 - V) / 5.98))
    desc: The plateau potassium current
    in [uA/uF]

#
# Ito (Ito1) :: The "4AP-sensitive transient outward K+ current, uA/uF"
# Described in section D
#
[ito]
use membrane.V as V
use nernst.EK
#define parameters from xTO
r1=0.055361418
r2=11.68420234
r5=3.98918108
r6=-11.0471393

s1=0.000344231
s2=-17.63447229
s5=186.7605369
s6=8.180933873

tau_r_const=0.696758421
tau_s_const=11.22445772

#parameter-dependent values:
r3=r5*r1
r4=1/((1/r2)+(1/r6))
s3=s5*s1
s4=1/((1/s2)+(1/s6))

# 17: s (dimensionless) (inactivation in i_to)
alpha_s=s1*exp(V/s2)
beta_s=s3*exp(V/s4)
s_inf=alpha_s/(alpha_s+beta_s)
tau_s=((1/(alpha_s+beta_s))+tau_s_const)
dot(S) = (s_inf-S)/tau_s

# 18: r (dimensionless) (activation in i_to)
alpha_r=r1*exp(V/r2)
beta_r=r3*exp(V/r4)
r_inf=alpha_r/(alpha_r+ beta_r)
tau_r=(1/(alpha_r+ beta_r))+tau_r_const
dot(R) = (r_inf-R)/tau_r

#Current:
g_to = 0.117833333 
# nS_per_pF (in i_to)
ITo = (1.0 - parameters.Ito_Block) * g_to*(V-EK)*S*R


#
# Background Calcium Current
# Described in section M
#
[icab]
use membrane.V as V
use nernst.ECa as E_Ca
## Background Calcium (I_bCa):
# Ten Tusscher formulation
gCab = 0.000592*0.62   
# nS_per_pF (in i_b_Ca)
ICab = gCab*(V-E_Ca)


#
# The Sarcolemmal Calcium Pump
# Described in section L
#

[ipca]
use calcium.uCa_i as Cai
## Calcium SL Pump (IpCa):
# Ten Tusscher formulation
GpCa = 0.025*10.5  
# pA_per_pF (in IpCa)
KpCa = 0.0005   
# millimolar (in IpCa)
IpCa = GpCa*Cai/(Cai+KpCa)

#
# Cotransporters
# Described in sections H and N
#


#
# Ca2+ release from JSR to myoplasm
# Described in section P (SR Release)
#

[irel]
use calcium.uCa_sr as Ca_sr
use calcium.uCa_i as Cai
use cell.v_sr as v_sr
use cell.v_cyt as Vc
## SR Release/RYR (J_rel):
# re-fit parameters. scaled to account for differences in calcium concentration in

# cleft (cleft is used in shannon-bers model geometry, not in this model geometry)
ks = 12.5
# [1/ms]
koCa = 56320*11.43025
# [mM^-2 1/ms]  
kiCa = 54*0.3425
# [1/mM/ms]
kom = 1.5*0.1429
# [1/ms]
kim = 0.001*0.5571
# [1/ms]
ec50SR = 0.45
MaxSR = 15
MinSR = 1

kCaSR = MaxSR - (MaxSR-MinSR)/(1+(ec50SR/Ca_sr)^2.5)
koSRCa = koCa/kCaSR
kiSRCa = kiCa*kCaSR
RI = 1-R-O-I

dot(R) =(kim*RI-kiSRCa*Cai*R)-(koSRCa*Cai^2*R-kom*O)
# R
dot(O) =(koSRCa*Cai^2*R-kom*O)-(kiSRCa*Cai*O-kim*I)
# O
dot(I) =(kiSRCa*Cai*O-kim*I)-(kom*I-koSRCa*Cai^2*RI)
# I

Irel= ks*O*(Ca_sr-Cai)*(v_sr/Vc)

    
[If]
use membrane.V as V
use nernst.EK as E_K
use nernst.ENa as E_Na
## Funny/HCN current (If):
#define parameters from x_F
xF1=5.79E-07
xF2=-14.58971217
xF5=20086.65024
xF6=10.20235285
xF_const=23.94529135

#parameter-dependent values:
xF3=xF5*xF1
xF4=1/((1/xF2)+(1/xF6))

# 16: Xf (dimensionless) (inactivation in i_f)
alpha_Xf=xF1*exp(V/xF2)
beta_Xf=xF3*exp(V/xF4)
Xf_inf=alpha_Xf/(alpha_Xf+beta_Xf)
tau_Xf=((1/(alpha_Xf+beta_Xf))+xF_const)
dot(Xf) = (Xf_inf-Xf)/tau_Xf

#Current:
g_f=0.0435 
# nS_per_pF (in i_f)
NatoK_ratio=.491 
#Verkerk et al. 2013
Na_frac=NatoK_ratio/(NatoK_ratio+1)
i_fNa=Na_frac*g_f*Xf*(V-E_Na)
i_fK=(1-Na_frac)*g_f*Xf*(V-E_K)
i_f=i_fNa+i_fK

[iup]
use calcium.uCa_i as Cai
## SR Uptake/SERCA (J_up):
# Ten Tusscher formulation
Kup = 0.00025*0.702
# millimolar (in calcium_dynamics)
VmaxUp =0.000425 * 0.26   
# millimolar_per_milisecond (in calcium_dynamics)
i_up =VmaxUp/(1.0+Kup^2.0/Cai^2.0)

[ileak]
use calcium.uCa_i as Cai
use calcium.uCa_sr as Ca_sr
## SR Leak (J_leak):
# Ten Tusscher formulation
V_leak = 1*0.00008*0.02  
# per_millisecond (in calcium_dynamics)
i_leak = (Ca_sr-Cai)*V_leak

[[protocol]]
# Level  Start    Length   Period   Multiplier
1.0      0      0.5      4000     0

[[script]]
import matplotlib.pyplot as plt
import myokit
import numpy as np

# Get model and protocol, create simulation
m = get_model()
p = get_protocol()
s = myokit.Simulation(m, p)
s.set_constant('membrane.stim_amplitude', 0)
s.set_constant('membrane.hyperpol_cur', 0.1)
#s.set_constant('If.g_f', 0.0435 * 0.7)

bcl = 1000
# Run simulation
s.pre(200*bcl)
d = s.run(10*bcl) #, log_interval = 1)

s2 = myokit.Simulation(m, p)
s2.set_constant('membrane.stim_amplitude', 0)
s2.set_constant('membrane.hyperpol_cur', 0.1)
#s2.set_constant('If.g_f', 0.0435 * 0.7)

s2.set_constant('ical.shift_inact', -10)
s2.set_constant('ical.shift_act', 0)
s2.set_constant('ical.k_fca_thresh', -30)
s2.set_constant('parameters.INaL_Block', -5) #-20)
s2.set_constant('parameters.IKr_Block', 0.45)
#s2.set_constant('parameters.IK1_Block', -0.4)
#s2.set_constant('ical.f4', 10)

s2.pre(200*bcl)
d2 = s2.run(10*bcl) #, log_interval = 1)
#d2 = s2.run(2000,log=d2)
# Display the results
plt.figure()
nrows = 5
ncols = 1
plt.subplot(nrows, ncols, 1)
plt.plot(d.time(), d['membrane.V'], '-k', d2.time(), d2['membrane.V'], '--k')

plt.subplot(nrows, ncols, 2)
plt.plot(d.time(), d['ical.ICaL'], '-k', d2.time(), d2['ical.ICaL'], '--k')
plt.plot(d.time(), d['ikr.IKr'], '-r', d2.time(), d2['ikr.IKr'], '--r')
plt.plot(d.time(), d['ik1.IK1'], '-b', d2.time(), d2['ik1.IK1'], '--b')
plt.plot(d.time(), d['inal.INaL'], '-g', d2.time(), d2['inal.INaL'], '--g')

plt.subplot(nrows, ncols, 3)
plt.plot(d.time(), d['ical.Po'], '-k', d2.time(), d2['ical.Po'], '--k',)

plt.subplot(nrows, ncols, 4)
plt.plot(d.time(), d['ical.D'], '-k', d.time(), d['ical.F1'], '-r', d.time(), d['ical.fCa'], '-b')
plt.plot(d.time(), d['ical.d_inf'], '--k', d.time(), d['ical.f_inf'], '--r', d.time(), d['ical.fCa_inf'], '--b')

plt.subplot(nrows, ncols, 5)
plt.plot(d2.time(), d2['ical.D'], '-k', d2.time(), d2['ical.F1'], '-r', d2.time(), d2['ical.fCa'], '-b')
plt.plot(d2.time(), d2['ical.d_inf'], '--k', d2.time(), d2['ical.f_inf'], '--r', d2.time(), d2['ical.fCa_inf'], '--b')

plt.show()

#np.savetxt("currclamp_WT_Vm.csv", np.c_[d.time(), d['membrane.V']], delimiter = ',')
#np.savetxt("currclamp_KO_EAD_Vm.csv", np.c_[d2.time(), d2['membrane.V']], delimiter = ',')

